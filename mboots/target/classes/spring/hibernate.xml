<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	"
	>	
	<bean id="ssfactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="DataSource">
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:/hibernate/common/*.hbm.xml</value>
				<!-- hibernate generate start-->
				<!-- hibernate generate end -->
				<!-- please do not change this module,it will be rewritten automatically with the data included by the module jars in the WEB-INF/lib/modules-->
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${db1.sqldialect}</prop>
				<prop key="hibernate.show_sql">${show_sql}</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>  
			</props>
		</property>
		<property name="cacheRegionFactory" ref="cacheProvider"></property>
	</bean>
	<bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db1.driverClassName}" />
		<property name="jdbcUrl" value="${db1.url}" />
		<property name="user" value="${db1.username}" />
		<property name="password" value="${db1.password}"/>
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>	
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="ssfactory"></property>
	</bean>
	
	
	<bean id="cacheProvider" class="com.mboots.com.cache.SpringEhCacheProvider">
		<property name="configLocation">
			<value>classpath:ehcache-hibernate.xml</value>
		</property>
		<property name="diskStoreLocation">
			<value>/WEB-INF/cache/hibernate</value>
		</property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <!-- 事务执行方式
        REQUIRED：指定当前方法必需在事务环境中运行，
        如果当前有事务环境就加入当前正在执行的事务环境，
        如果当前没有事务，就新建一个事务。
        这是默认值。 
       -->
      <tx:method name="create*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <tx:method name="save*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <tx:method name="add*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <tx:method name="update*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <tx:method name="remove*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <tx:method name="del*" rollback-for="Exception" propagation="REQUIRED" read-only="false"/>
      <!-- 
        指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 
        查询定义即可
        read-only="true"  表示只读
       -->
      <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
    </tx:attributes>
  </tx:advice>

  <aop:config>
    <aop:pointcut id="serviceOperation" expression="execution(* com.mboots.com.*.service.*Service.*(..))" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
  </aop:config>
  
  
</beans>